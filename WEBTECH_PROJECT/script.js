<script>
 (() => { const USERS_KEY = 'secure-gallery-users'; const CURRENT_USER_KEY = 'secure-gallery-current-user'; const FOLDERS_KEY = 'secure-gallery-folders'; const ALL_IMAGES_KEY = 'secure-gallery-all-images'; const PRIVATE_IMAGES_KEY = 'secure-gallery-private-images'; const tabs = {all: document.getElementById('tabAllImages'), folders: document.getElementById('tabFolders'), private: document.getElementById('tabPrivate'), }; const sections = {all: document.getElementById('allImagesSection'), folders: document.getElementById('folderSection'), private: document.getElementById('privateSection') }; const allImagesGallery = document.getElementById('allImagesGallery'); const folderListDiv = document.getElementById('folderList'); const folderNameInput = document.getElementById('folderNameInput'); const createFolderBtn = document.getElementById('createFolderBtn'); const folderImagesContainer = document.getElementById('folderImagesContainer'); const uploadFolderImageBtn = document.getElementById('uploadFolderImageBtn'); const folderFileInput = document.getElementById('folderFileInput'); const privateLoggedOut = document.getElementById('privateLoggedOut'); const privateLoggedIn = document.getElementById('privateLoggedIn'); const privateUsernameSpan = document.getElementById('privateUsername'); const logoutPrivateBtn = document.getElementById('logoutPrivateBtn'); const uploadPrivateImageBtn = document.getElementById('uploadPrivateImageBtn'); const privateFileInput = document.getElementById('privateFileInput'); const privateGallery = document.getElementById('privateGallery'); const uploadImageBtn = document.getElementById('uploadImageBtn'); const uploadFileInput = document.getElementById('uploadFileInput'); const modal = document.getElementById('modal'); const modalImg = document.getElementById('modalImg'); const modalCloseBtn = modal.querySelector('.close-btn'); const registerModal = document.getElementById('registerModal'); const loginModal = document.getElementById('loginModal'); const resetModal = document.getElementById('resetModal'); const registerUsernameInput = document.getElementById('registerUsername'); const registerPasswordInput = document.getElementById('registerPassword'); const registerPasswordRemindInput = document.getElementById('registerPasswordRemind'); const registerSubmitBtn = document.getElementById('registerSubmitBtn'); const registerErrorDiv = document.getElementById('registerError'); const closeRegisterBtn = document.getElementById('closeRegisterBtn'); const switchToLoginBtn = document.getElementById('switchToLoginBtn'); const loginUsernameInput = document.getElementById('loginUsername'); const loginPasswordInput = document.getElementById('loginPassword'); const loginSubmitBtn = document.getElementById('loginSubmitBtn'); const loginErrorDiv = document.getElementById('loginError'); const closeLoginBtn = document.getElementById('closeLoginBtn'); const switchToRegisterBtn = document.getElementById('switchToRegisterBtn'); const showResetBtn = document.getElementById('showResetBtn'); const resetUsernameInput = document.getElementById('resetUsername'); const resetPasswordRemindInput = document.getElementById('resetPasswordRemindInput'); const resetPasswordInput = document.getElementById('resetPassword'); const resetSubmitBtn = document.getElementById('resetSubmitBtn'); const resetErrorDiv = document.getElementById('resetError'); const closeResetBtn = document.getElementById('closeResetBtn'); let allImages = []; let folders = { }; let currentFolder = null; let users = { }; let currentUser = null; let privateImages = []; function loadFromStorage() {users = JSON.parse(localStorage.getItem(USERS_KEY)) || {}; allImages = JSON.parse(localStorage.getItem(ALL_IMAGES_KEY)) || [{src: 'Brainware-university.jpg', caption: 'Brainware University Campus' }, {src: 'brainware-overview.jpg', caption: 'Overview of Brainware University' }, {src: 'BRAINWARE_UNIVERSITY.jpeg', caption: 'BRAINWARE UNIVERSITY' }, {src: 'BRAINWARE_FULL_VIEW.jpg', caption: 'Full View of Brainware University' }, {src: 'BRAINWARE_FRONT_VIEW.avif', caption: 'Front View of Brainware University' }, {src: 'BRAINWARE_CLASS.avif', caption: 'Classroom at Brainware University' }, {src: 'BRAINWARE_B_IV.jpeg', caption: 'BRAINWARE Building B IV' }, {src: 'BRAAINWARE_UNIVERSITY2.jpg', caption: 'Another view of Brainware University' },]; folders = JSON.parse(localStorage.getItem(FOLDERS_KEY)) || { }; privateImages = JSON.parse(localStorage.getItem(PRIVATE_IMAGES_KEY)) || []; currentUser = localStorage.getItem(CURRENT_USER_KEY); } function saveAll() {localStorage.setItem(USERS_KEY, JSON.stringify(users)); localStorage.setItem(ALL_IMAGES_KEY, JSON.stringify(allImages)); localStorage.setItem(FOLDERS_KEY, JSON.stringify(folders)); localStorage.setItem(PRIVATE_IMAGES_KEY, JSON.stringify(privateImages)); if (currentUser) localStorage.setItem(CURRENT_USER_KEY, currentUser); else localStorage.removeItem(CURRENT_USER_KEY); } function setupTabs() {Object.entries(tabs).forEach(([key, btn]) => { btn.onclick = () => { Object.keys(sections).forEach(k => { sections[k].classList.toggle('active', k === key); tabs[k].classList.toggle('active', k === key); tabs[k].setAttribute('aria-selected', k === key ? 'true' : 'false'); tabs[k].tabIndex = k === key ? 0 : -1; }); if (key === 'folders') { renderFolderList(); clearFolderImages(); currentFolder = null; uploadFolderImageBtn.style.display = 'none'; } if (key === 'private') { updatePrivateUI(); } }; }); } function renderGallery(container, images) {container.innerHTML = ''; if (images.length === 0) {container.innerHTML = '<p style="grid-column:1/-1;text-align:center;color:#bbb;">No images to display.</p>'; return; } images.forEach((imgObj) => { const div = document.createElement('div'); div.className = 'gallery-item'; div.tabIndex = 0; div.setAttribute('aria-label', imgObj.caption || 'Image'); const img = document.createElement('img'); img.src = imgObj.src; img.alt = imgObj.caption || ''; div.appendChild(img); const caption = document.createElement('div'); caption.className = 'caption-overlay'; caption.textContent = imgObj.caption || ''; div.appendChild(caption); div.onclick = () => showModal(imgObj.src, imgObj.caption); div.onkeypress = e => { if (e.key === 'Enter') showModal(imgObj.src, imgObj.caption); }; container.appendChild(div); }); } function showModal(src, alt) {modal.classList.add('show'); modalImg.src = src; modalImg.alt = alt || ''; modalCloseBtn.focus(); } function closeModalFunc() {modal.classList.remove('show'); modalImg.src = ''; modalImg.alt = ''; } function renderAllImages() {renderGallery(allImagesGallery, allImages); } function renderFolderList() {folderListDiv.innerHTML = ''; const folderNames = Object.keys(folders); if (folderNames.length === 0) {folderListDiv.textContent = "No folders yet. Create one above."; return; } folderNames.forEach(name => { const btn = document.createElement('button'); btn.textContent = name; btn.onclick = () => openFolder(name); folderListDiv.appendChild(btn); }); } function openFolder(name) {currentFolder = name; renderGallery(folderImagesContainer, folders[name]); uploadFolderImageBtn.style.display = 'inline-block'; } function clearFolderImages() {folderImagesContainer.innerHTML = ''; } function addFolderImage(fileDataUrl) { if (!currentFolder) return alert('Select a folder to add image to!'); let caption = prompt('Enter caption for this image:', 'Folder Image'); if (caption === null) caption = 'Folder Image'; folders[currentFolder].push({src: fileDataUrl, caption }); saveAll(); openFolder(currentFolder); } function updatePrivateUI() { if (currentUser && users[currentUser]) {privateLoggedOut.style.display = 'none'; privateLoggedIn.style.display = 'block'; privateUsernameSpan.textContent = currentUser; renderGallery(privateGallery, privateImages); } else {privateLoggedIn.style.display = 'none'; privateUsernameSpan.textContent = ''; privateLoggedOut.style.display = 'block'; } } function addPrivateImage(fileDataUrl) {let caption = prompt('Enter caption for this private image:', 'Private Image'); if (caption === null) caption = 'Private Image'; privateImages.push({src: fileDataUrl, caption }); saveAll(); renderGallery(privateGallery, privateImages); } function registerUser(username, password, reminder) { if (!username || !password) return 'Username and Password required.'; username = username.trim(); if (users[username]) return 'Username already exists.'; users[username] = {pw: btoa(password), reminder: reminder || '' }; saveAll(); return null; } function loginUser(username, password) {username = username.trim(); const userObj = users[username]; if (!userObj) return 'User not found.'; if (btoa(password) !== userObj.pw) return 'Incorrect password.'; currentUser = username; saveAll(); return null; } function resetPassword(username, reminder, newPassword) {username = username.trim(); const userObj = users[username]; if (!userObj) return 'User not found.'; if (!reminder) return 'Password reminder required.'; if (userObj.reminder !== reminder) return 'Incorrect password reminder.'; if (!newPassword) return 'New password required.'; users[username].pw = btoa(newPassword); saveAll(); return null; } function logoutUser() {currentUser = null; saveAll(); updatePrivateUI(); } createFolderBtn.onclick = () => { const name = folderNameInput.value.trim(); if (!name) return alert('Folder name cannot be empty.'); if (folders[name]) return alert('Folder already exists.'); folders[name] = []; saveAll(); renderFolderList(); folderNameInput.value = ''; }; uploadImageBtn.onclick = () => uploadFileInput.click(); uploadFileInput.onchange = () => { const file = uploadFileInput.files[0]; if (!file) return; if (!file.type.startsWith('image/')) return alert('Select a valid image file.'); const reader = new FileReader(); reader.onload = e => {let caption = prompt('Enter caption for image:', 'Image'); if (caption === null) caption = 'Image'; allImages.push({src: e.target.result, caption }); saveAll(); renderAllImages(); uploadFileInput.value = ''; }; reader.readAsDataURL(file); }; uploadFolderImageBtn.onclick = () => { if (!currentFolder) return alert('Select a folder to upload image.'); folderFileInput.click(); }; folderFileInput.onchange = () => { const file = folderFileInput.files[0]; if (!file) return; if (!file.type.startsWith('image/')) return alert('Select a valid image file.'); const reader = new FileReader(); reader.onload = e => {addFolderImage(e.target.result); folderFileInput.value = ''; }; reader.readAsDataURL(file); }; uploadPrivateImageBtn.onclick = () => privateFileInput.click(); privateFileInput.onchange = () => { const file = privateFileInput.files[0]; if (!file) return; if (!file.type.startsWith('image/')) return alert('Select a valid image file.'); const reader = new FileReader(); reader.onload = e => {addPrivateImage(e.target.result); privateFileInput.value = ''; }; reader.readAsDataURL(file); }; modalCloseBtn.onclick = closeModalFunc; modal.onclick = (e) => { if (e.target === modal) closeModalFunc(); }; document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && modal.classList.contains('show')) closeModalFunc(); }); Object.values(tabs).forEach(btn => {btn.addEventListener('keydown', e => { if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') { e.preventDefault(); const keys = Object.keys(tabs); let idx = keys.indexOf(Object.entries(tabs).find(([k, t]) => t === btn)[0]); if (e.key === 'ArrowRight') idx = (idx + 1) % keys.length; else idx = (idx - 1 + keys.length) % keys.length; tabs[keys[idx]].focus(); } }); }); function showModalBox(modalBox) {modalBox.classList.add('show'); const inputs = modalBox.querySelectorAll('input[type=text], input[type=password]'); if (inputs.length) inputs[0].focus(); } function hideModalBox(modalBox) {modalBox.classList.remove('show'); const errorDiv = modalBox.querySelector('.error'); if (errorDiv) errorDiv.textContent = ''; const inputs = modalBox.querySelectorAll('input[type=text], input[type=password]'); inputs.forEach(i => i.value = ''); } document.getElementById('showRegisterBtn').onclick = () => showModalBox(registerModal); document.getElementById('closeRegisterBtn').onclick = () => hideModalBox(registerModal); switchToLoginBtn.onclick = () => {hideModalBox(registerModal); showModalBox(loginModal); }; registerSubmitBtn.onclick = () => { const username = registerUsernameInput.value.trim(); const password = registerPasswordInput.value; const reminder = registerPasswordRemindInput.value.trim(); const err = registerUser(username, password, reminder); if (err) {registerErrorDiv.textContent = err; return; } alert(`Registered successfully. You can now login.`); hideModalBox(registerModal); showModalBox(loginModal); }; document.getElementById('showLoginBtn').onclick = () => showModalBox(loginModal); document.getElementById('closeLoginBtn').onclick = () => hideModalBox(loginModal); switchToRegisterBtn.onclick = () => {hideModalBox(loginModal); showModalBox(registerModal); }; showResetBtn.onclick = () => {hideModalBox(loginModal); showModalBox(resetModal); }; loginSubmitBtn.onclick = () => { const username = loginUsernameInput.value.trim(); const password = loginPasswordInput.value; const err = loginUser(username, password); if (err) {loginErrorDiv.textContent = err; return; } alert(`Welcome ${username}!`); hideModalBox(loginModal); updatePrivateUI(); Object.keys(tabs).forEach(k => { const act = (k === 'private'); sections[k].classList.toggle('active', act); tabs[k].classList.toggle('active', act); tabs[k].setAttribute('aria-selected', act ? 'true' : 'false'); tabs[k].tabIndex = act ? 0 : -1; }); }; document.getElementById('closeResetBtn').onclick = () => hideModalBox(resetModal); resetSubmitBtn.onclick = () => { const username = resetUsernameInput.value.trim(); const reminder = resetPasswordRemindInput.value.trim(); const newPassword = resetPasswordInput.value; const err = resetPassword(username, reminder, newPassword); if (err) {resetErrorDiv.textContent = err; return; } alert(`Password reset successful for user ${username}. You can now login.`); hideModalBox(resetModal); showModalBox(loginModal); }; logoutPrivateBtn.onclick = () => {logoutUser(); }; function init() {loadFromStorage(); renderAllImages(); renderFolderList(); updatePrivateUI(); setupTabs(); tabs.all.focus(); } init(); })();
</script>